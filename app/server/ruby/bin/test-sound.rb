#!/usr/bin/env ruby
#--
# This file is part of Sonic Pi: http://sonic-pi.net
# Full project source: https://github.com/samaaron/sonic-pi
# License: https://github.com/samaaron/sonic-pi/blob/master/LICENSE.md
#
# Copyright 2018 by Sam Aaron (http://sam.aaron.name).
# All rights reserved.
#
# Permission is granted for use, copying, modification, and
# distribution of modified versions of this work as long as this
# notice is included.
#++

require 'rbconfig'

require_relative "../core.rb"
require_relative "../lib/sonicpi/studio"

require_relative "../lib/sonicpi/server"
require_relative "../lib/sonicpi/util"
require_relative "../lib/sonicpi/osc/osc"
require_relative "../lib/sonicpi/lang/core"
require_relative "../lib/sonicpi/lang/sound"
require_relative "../lib/sonicpi/runtime"


STDOUT.puts "Sonic Pi server booting..."

include SonicPi::Util
web_server_ip = ARGV[0] ? ARGV[0].to_s : "127.0.0.1"
web_server_port = ARGV[1] ? ARGV[1].to_i : 8000


server_port = ARGV[3] ? ARGV[3].to_i : 4557
#client_port = ARGV[4] ? ARGV[4].to_i : 4558
client_port = 4558
scsynth_port = ARGV[4] ? ARGV[4].to_i : 4556
scsynth_send_port = ARGV[5] ? ARGV[5].to_i : 4556
osc_cues_port = ARGV[6] ? ARGV[6].to_i : 4559
erlang_port = ARGV[7] ? ARGV[7].to_i : 4560
osc_midi_out_port = ARGV[8] ? ARGV[8].to_i : 4561
osc_midi_in_port = ARGV[9] ? ARGV[9].to_i : 4562


sonic_pi_ports = {
  server_port: server_port,
  scsynth_port: scsynth_port,
  scsynth_send_port: scsynth_send_port,
  osc_cues_port: osc_cues_port,
  erlang_port: erlang_port,
  osc_midi_out_port: osc_midi_out_port,
  osc_midi_in_port: osc_midi_in_port }.freeze



at_exit do
  STDOUT.puts "Server is exiting."
  STDOUT.puts "Goodbye :-)"
end

user_methods = Module.new
name = "SonicPiLang" # this should be autogenerated
klass = Object.const_set name, Class.new(SonicPi::Runtime)

klass.send(:include, user_methods)
klass.send(:include, SonicPi::Lang::Core)
klass.send(:include, SonicPi::Lang::Sound)
klass.send(:include, SonicPi::Lang::Support::DocSystem)

klass.send(:define_method, :inspect) { "Runtime" }
#klass.send(:include, SonicPi::Lang::Pattern)

ws_out = Queue.new

begin
  sp =  klass.new sonic_pi_ports, ws_out, user_methods

  sp.__print_boot_messages

  code = "
# Coded by Sam Aaron
use_debug false
notes = (scale :e1, :minor_pentatonic, num_octaves: 2).shuffle
live_loop :rerezzed do
  tick_reset
  t = 0.04
  sleep -t
  with_fx :bitcrusher do
    s = synth :dsaw, note: :e3, sustain: 8, note_slide: t, release: 0
    64.times do
      sleep 0.125
      control s, note: notes.tick
    end
  end
  sleep t
end
live_loop :industry do
  sample :loop_industrial, beat_stretch: 1
  sleep 1
end
live_loop :drive do
  sample :bd_haus, amp: 3
  sleep 0.5
end
"

  sp.__spider_eval code

  Kernel.sleep 60

rescue Exception => e
  STDOUT.puts "Failed to start server: " + e.message
  STDOUT.puts e.backtrace.join("\n")
  exit
end